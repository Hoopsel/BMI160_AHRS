<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\STM32F4_AHRS_BOX.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\STM32F4_AHRS_BOX.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Jul 20 17:23:07 2017
<BR><P>
<H3>Maximum Stack Usage =        576 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; mf_open &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[83]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[43]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[43]">ADC_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2b]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream6_IRQHandler</a> from uart2.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[57]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream7_IRQHandler</a> from uart1.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2e]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[37]">EXTI0_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[54]">EXTI15_10_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[38]">EXTI1_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[39]">EXTI2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3a]">EXTI3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3b]">EXTI4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[44]">EXTI9_5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[35]">FLASH_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[67]">FPU_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[29]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4d]">I2C1_ER_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4c]">I2C1_EV_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4f]">I2C2_ER_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4e]">I2C2_EV_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[66]">I2C3_ER_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[65]">I2C3_EV_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2a]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[28]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[60]">OTG_FS_IRQHandler</a> from usb_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[32]">PVD_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2f]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[36]">RCC_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[55]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[34]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[27]">Reset_Handler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[58]">SDIO_IRQHandler</a> from sdio_sdcard.o(i.SDIO_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[50]">SPI1_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[51]">SPI2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[5a]">SPI3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[1a]">STORAGE_GetCapacity</a> from usbd_storage_msd.o(i.STORAGE_GetCapacity) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1f]">STORAGE_GetMaxLun</a> from usbd_storage_msd.o(i.STORAGE_GetMaxLun) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[19]">STORAGE_Init</a> from usbd_storage_msd.o(i.STORAGE_Init) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1b]">STORAGE_IsReady</a> from usbd_storage_msd.o(i.STORAGE_IsReady) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1c]">STORAGE_IsWriteProtected</a> from usbd_storage_msd.o(i.STORAGE_IsWriteProtected) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1d]">STORAGE_Read</a> from usbd_storage_msd.o(i.STORAGE_Read) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1e]">STORAGE_Write</a> from usbd_storage_msd.o(i.STORAGE_Write) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[2d]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[30]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[68]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xx.o(.text)
 <LI><a href="#[33]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[45]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[48]">TIM1_CC_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[47]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[46]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[49]">TIM2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4a]">TIM3_IRQHandler</a> from main.o(i.TIM3_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4b]">TIM4_IRQHandler</a> from fat_driver.o(i.TIM4_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[59]">TIM5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[52]">USART1_IRQHandler</a> from uart1.o(i.USART1_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[53]">USART2_IRQHandler</a> from uart2.o(i.USART2_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[64]">USART6_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[3]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[a]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[b]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[f]">USBD_MSC_DataIn</a> from usbd_msc_core.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[10]">USBD_MSC_DataOut</a> from usbd_msc_core.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[d]">USBD_MSC_DeInit</a> from usbd_msc_core.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[11]">USBD_MSC_GetCfgDesc</a> from usbd_msc_core.o(i.USBD_MSC_GetCfgDesc) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[c]">USBD_MSC_Init</a> from usbd_msc_core.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[e]">USBD_MSC_Setup</a> from usbd_msc_core.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[7]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[9]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[6]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[8]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[17]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[22]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[25]">USBD_USR_DeviceConnected</a> from usbd_usr.o(i.USBD_USR_DeviceConnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[12]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[26]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(i.USBD_USR_DeviceDisconnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[21]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[24]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[23]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[20]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[18]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[13]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[14]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[15]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[16]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2c]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[31]">WWDG_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[6a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f401xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[21a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[21b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[21c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[21d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[21e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[73]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[21f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[220]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[221]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[222]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[223]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[224]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[225]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[226]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[227]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[228]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[229]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[22b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[22d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[22e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[230]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[231]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[232]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[233]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[234]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[235]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[236]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[237]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[238]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[6c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[239]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[70]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[72]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[23a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[74]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mf_open &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[23b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[84]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[77]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[23c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[79]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16c]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio_sdcard.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[16d]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio_sdcard.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f401xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_GetCapacity
</UL>

<P><STRONG><a name="[7b]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[7d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[23d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[241]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[81]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[245]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[248]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[76]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[249]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>ACC_Cal</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, bmi160.o(i.ACC_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ACC_Cal &rArr; UART2_Send_ACC &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Send_ACC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_get_ACCMAX
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>ACC_Save_cal</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, bmi160.o(i.ACC_Save_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACC_Save_cal &rArr; Write_config &rArr; Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_config
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>ADC1_Configuration</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, stm32adc.o(i.ADC1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADC1_Configuration &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_initial
</UL>

<P><STRONG><a name="[90]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[8c]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[91]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[8f]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[92]"></a>ADC_DMA_Configuration</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, stm32adc.o(i.ADC_DMA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_initial
</UL>

<P><STRONG><a name="[96]"></a>ADC_GPIO_Configuration</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32adc.o(i.ADC_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_initial
</UL>

<P><STRONG><a name="[8d]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>

<P><STRONG><a name="[99]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_initial
</UL>

<P><STRONG><a name="[98]"></a>ADC_Voltage_initial</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32adc.o(i.ADC_Voltage_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_Voltage_initial &rArr; ADC_DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Configuration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>BMI160_InitGyro_Offset</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, bmi160.o(i.BMI160_InitGyro_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BMI160_InitGyro_Offset &rArr; Write_config &rArr; Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>BMI160_Read_ID</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bmi160.o(i.BMI160_Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BMI160_Read_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_init
</UL>

<P><STRONG><a name="[205]"></a>BMI160_Reset_ACC_Offset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bmi160.o(i.BMI160_Reset_ACC_Offset))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>BMI160_get_ACCMAX</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, bmi160.o(i.BMI160_get_ACCMAX))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BMI160_get_ACCMAX &rArr; BMI160_readAccGyro &rArr; SPI1_readRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Cal
</UL>

<P><STRONG><a name="[a2]"></a>BMI160_init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, bmi160.o(i.BMI160_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BMI160_init &rArr; mwriteReg &rArr; SPI1_writeReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_ID
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwriteReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_init
</UL>

<P><STRONG><a name="[9c]"></a>BMI160_readAccGyro</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, bmi160.o(i.BMI160_readAccGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BMI160_readAccGyro &rArr; SPI1_readRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_NewVal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_GetAvg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_readRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_InitGyro_Offset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_get_ACCMAX
</UL>

<P><STRONG><a name="[2b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>CmdError</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[ab]"></a>CmdResp1Error</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ac]"></a>CmdResp2Error</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[ad]"></a>CmdResp3Error</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[ae]"></a>CmdResp6Error</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sdio_sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[af]"></a>CmdResp7Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[b0]"></a>DCD_DevDisconnect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_DevDisconnect &rArr; USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
</UL>

<P><STRONG><a name="[b2]"></a>DCD_EP_Close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[b4]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[b6]"></a>DCD_EP_Flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_EP_Flush &rArr; USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>

<P><STRONG><a name="[b9]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[bb]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
</UL>

<P><STRONG><a name="[1ae]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[be]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>

<P><STRONG><a name="[c0]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendData
</UL>

<P><STRONG><a name="[cf]"></a>DCD_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[42]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart2.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; USART2DMAUpdate &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart1.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; USART1DMAUpdate &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Configuration
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>

<P><STRONG><a name="[118]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>

<P><STRONG><a name="[15c]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[15b]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[d7]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>

<P><STRONG><a name="[94]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Configuration
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>

<P><STRONG><a name="[2e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>FAT_Initial</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fat_driver.o(i.FAT_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = FAT_Initial &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>FileSave_TimerSet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fat_driver.o(i.FileSave_TimerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FileSave_TimerSet &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>File_Save_Routing</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fat_driver.o(i.File_Save_Routing))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = File_Save_Routing &rArr; mf_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>File_head</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fat_driver.o(i.File_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = File_head &rArr; mf_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>FindSCR</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, sdio_sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[e9]"></a>FreeIMU_AHRSupdate</STRONG> (Thumb, 1468 bytes, Stack size 144 bytes, imu.o(i.FreeIMU_AHRSupdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FreeIMU_AHRSupdate &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getQ
</UL>

<P><STRONG><a name="[97]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_POWER_Down
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED_GPIO
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[10b]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[169]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key_Routing
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BeepON
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_POWER_Down
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED_GPIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_ID
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwriteReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_Reg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BeepON
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key_Routing
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED_GPIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_ID
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwriteReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_Reg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_OpenMassStorage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check
</UL>

<P><STRONG><a name="[121]"></a>Get_Bat_Vol</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32adc.o(i.Get_Bat_Vol))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_BAT_LOW
</UL>

<P><STRONG><a name="[ef]"></a>Get_file_name</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, eeprom.o(i.Get_file_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_file_name &rArr; New_Filed &rArr; Write_config &rArr; Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Filed
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>I2C_ReadOneByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ioi2c.o(i.I2C_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_getRaw
</UL>

<P><STRONG><a name="[f7]"></a>IIC_Ack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ioi2c.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[f8]"></a>IIC_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ioi2c.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>IIC_NAck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ioi2c.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[f5]"></a>IIC_Read_Byte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ioi2c.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_readPROM
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getConversion
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[f3]"></a>IIC_Send_Byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ioi2c.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_startConversion
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_readPROM
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getConversion
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBytes
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[f2]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ioi2c.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_startConversion
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_readPROM
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getConversion
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBytes
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[f6]"></a>IIC_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ioi2c.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_startConversion
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_readPROM
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getConversion
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBytes
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadBytes
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[f4]"></a>IIC_Wait_Ack</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ioi2c.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_startConversion
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_readPROM
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getConversion
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBytes
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[fa]"></a>IICreadBytes</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ioi2c.o(i.IICreadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_getRaw
</UL>

<P><STRONG><a name="[fb]"></a>IICwriteByte</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ioi2c.o(i.IICwriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IICwriteByte &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_writeReg
</UL>

<P><STRONG><a name="[fc]"></a>IICwriteBytes</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ioi2c.o(i.IICwriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_AT24C
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteByte
</UL>

<P><STRONG><a name="[fd]"></a>IMU_AHRSupdate</STRONG> (Thumb, 1640 bytes, Stack size 176 bytes, imu.o(i.IMU_AHRSupdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = IMU_AHRSupdate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getQ
</UL>

<P><STRONG><a name="[ff]"></a>IMU_getQ</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, imu.o(i.IMU_getQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IMU_getQ &rArr; IMU_AHRSupdate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_AHRSupdate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIMU_AHRSupdate
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
</UL>

<P><STRONG><a name="[100]"></a>IMU_getValues</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, imu.o(i.IMU_getValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IMU_getValues &rArr; QMC5883_mgetValues &rArr; QMC5883_getRaw &rArr; IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_mgetValues
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getQ
</UL>

<P><STRONG><a name="[102]"></a>IMU_getYawPitchRoll</STRONG> (Thumb, 600 bytes, Stack size 80 bytes, imu.o(i.IMU_getYawPitchRoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = IMU_getYawPitchRoll &rArr; IMU_getQ &rArr; IMU_AHRSupdate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>IMU_init</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, imu.o(i.IMU_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IMU_init &rArr; QMC5883L_SetUp &rArr; QMC5883_FIFO_init &rArr; QMC5883_getRaw &rArr; IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_SetUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>Initial_LED_GPIO</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, led.o(i.Initial_LED_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Initial_LED_GPIO &rArr; Initial_PWM_LED &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>Initial_PWM_LED</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, led.o(i.Initial_PWM_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Initial_PWM_LED &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED_GPIO
</UL>

<P><STRONG><a name="[1db]"></a>Initial_System_Timer</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, delay.o(i.Initial_System_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[113]"></a>Initial_UART1</STRONG> (Thumb, 290 bytes, Stack size 96 bytes, uart1.o(i.Initial_UART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Initial_UART1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>Initial_UART2</STRONG> (Thumb, 286 bytes, Stack size 96 bytes, uart2.o(i.Initial_UART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Initial_UART2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>IsCardProgramming</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sdio_sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCardProgramming
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[120]"></a>Is_BAT_LOW</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, stm32adc.o(i.Is_BAT_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Is_BAT_LOW
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Vol
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>LED_Change</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, led.o(i.LED_Change))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[202]"></a>LED_Reverse</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led.o(i.LED_Reverse))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>MS561101BA_GetTemperature</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ms5611.o(i.MS561101BA_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MS561101BA_GetTemperature &rArr; MS561101BA_getConversion &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611BA_Routing
</UL>

<P><STRONG><a name="[12d]"></a>MS561101BA_NewAlt</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ms5611.o(i.MS561101BA_NewAlt))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
</UL>

<P><STRONG><a name="[127]"></a>MS561101BA_NewPress</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ms5611.o(i.MS561101BA_NewPress))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
</UL>

<P><STRONG><a name="[129]"></a>MS561101BA_NewTemp</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ms5611.o(i.MS561101BA_NewTemp))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
</UL>

<P><STRONG><a name="[203]"></a>MS561101BA_ResetAlt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ms5611.o(i.MS561101BA_ResetAlt))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>MS561101BA_getAvg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ms5611.o(i.MS561101BA_getAvg))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
</UL>

<P><STRONG><a name="[123]"></a>MS561101BA_getConversion</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms5611.o(i.MS561101BA_getConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS561101BA_getConversion &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_GetTemperature
</UL>

<P><STRONG><a name="[124]"></a>MS561101BA_getPressure</STRONG> (Thumb, 568 bytes, Stack size 104 bytes, ms5611.o(i.MS561101BA_getPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MS561101BA_getPressure &rArr; MS561101BA_get_altitude &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getConversion
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getAvg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_NewTemp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_NewPress
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611BA_Routing
</UL>

<P><STRONG><a name="[12a]"></a>MS561101BA_get_altitude</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, ms5611.o(i.MS561101BA_get_altitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = MS561101BA_get_altitude &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getAvg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_NewAlt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
</UL>

<P><STRONG><a name="[12e]"></a>MS561101BA_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ms5611.o(i.MS561101BA_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MS561101BA_init &rArr; MS561101BA_readPROM &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_readPROM
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>MS561101BA_readPROM</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ms5611.o(i.MS561101BA_readPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS561101BA_readPROM &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_init
</UL>

<P><STRONG><a name="[12f]"></a>MS561101BA_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ms5611.o(i.MS561101BA_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS561101BA_reset &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_init
</UL>

<P><STRONG><a name="[131]"></a>MS561101BA_startConversion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ms5611.o(i.MS561101BA_startConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS561101BA_startConversion &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611BA_Routing
</UL>

<P><STRONG><a name="[132]"></a>MS5611BA_Routing</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ms5611.o(i.MS5611BA_Routing))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = MS5611BA_Routing &rArr; MS561101BA_getPressure &rArr; MS561101BA_get_altitude &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_startConversion
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_GetTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[13b]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[13c]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[1a5]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[13d]"></a>MSC_BOT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BOT_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[13e]"></a>MSC_BOT_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BOT_Reset &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[139]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[2a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>NVIC_Configuration</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uart2.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
</UL>

<P><STRONG><a name="[e2]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_NVIC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSave_TimerSet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>

<P><STRONG><a name="[1b8]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[f0]"></a>New_Filed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eeprom.o(i.New_Filed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = New_Filed &rArr; Write_config &rArr; Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_file_name
</UL>

<P><STRONG><a name="[11c]"></a>OSMemCreate</STRONG> (Thumb, 126 bytes, Stack size 36 bytes, osqmem.o(i.OSMemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
</UL>

<P><STRONG><a name="[18c]"></a>OSMemDelete</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, osqmem.o(i.OSMemDelete))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAUpdate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAUpdate
</UL>

<P><STRONG><a name="[18d]"></a>OSMemGet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, osqmem.o(i.OSMemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSMemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2WriteDataToBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1WriteDataToBuffer
</UL>

<P><STRONG><a name="[13f]"></a>OSMemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, osqmem.o(i.OSMemInit))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
</UL>

<P><STRONG><a name="[60]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>QMC5883L_Save_Calib</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, qmc5883.o(i.QMC5883L_Save_Calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QMC5883L_Save_Calib &rArr; Write_config &rArr; Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_config
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>QMC5883L_SetUp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, qmc5883.o(i.QMC5883L_SetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QMC5883L_SetUp &rArr; QMC5883_FIFO_init &rArr; QMC5883_getRaw &rArr; IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_FIFO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_init
</UL>

<P><STRONG><a name="[204]"></a>QMC5883L_Start_Calib</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, qmc5883.o(i.QMC5883L_Start_Calib))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>QMC5883L_update_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, qmc5883.o(i.QMC5883L_update_config))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_init
</UL>

<P><STRONG><a name="[143]"></a>QMC5883_FIFO_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, qmc5883.o(i.QMC5883_FIFO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QMC5883_FIFO_init &rArr; QMC5883_getRaw &rArr; IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_getRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_SetUp
</UL>

<P><STRONG><a name="[144]"></a>QMC5883_getRaw</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, qmc5883.o(i.QMC5883_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QMC5883_getRaw &rArr; IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadBytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_newValues
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_mgetValues
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_FIFO_init
</UL>

<P><STRONG><a name="[148]"></a>QMC5883_getlastValues</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, qmc5883.o(i.QMC5883_getlastValues))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_mgetValues
</UL>

<P><STRONG><a name="[142]"></a>QMC5883_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, qmc5883.o(i.QMC5883_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QMC5883_init &rArr; QMC5883_writeReg &rArr; IICwriteByte &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_writeReg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_update_config
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_SetUp
</UL>

<P><STRONG><a name="[101]"></a>QMC5883_mgetValues</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, qmc5883.o(i.QMC5883_mgetValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QMC5883_mgetValues &rArr; QMC5883_getRaw &rArr; IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_getlastValues
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_getRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getValues
</UL>

<P><STRONG><a name="[145]"></a>QMC5883_newValues</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, qmc5883.o(i.QMC5883_newValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QMC5883_newValues
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_getRaw
</UL>

<P><STRONG><a name="[146]"></a>QMC5883_writeReg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qmc5883.o(i.QMC5883_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QMC5883_writeReg &rArr; IICwriteByte &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_init
</UL>

<P><STRONG><a name="[93]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED_GPIO
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Configuration
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[1b9]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[df]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Inttrup_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSave_TimerSet
</UL>

<P><STRONG><a name="[192]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[8b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[15e]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[193]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[137]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_StartStopUnit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[136]"></a>SCSI_SenseCode</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[158]"></a>SDEnWideBus</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[aa]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[164]"></a>SDIO_Clock_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e8]"></a>SDIO_DataConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[a9]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[166]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[58]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[15f]"></a>SDIO_Register_Deinit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Register_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e7]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[168]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[15a]"></a>SD_DMA_Config</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, sdio_sdcard.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[15d]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[162]"></a>SD_GetCardInfo</STRONG> (Thumb, 746 bytes, Stack size 20 bytes, sdio_sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[dc]"></a>SD_Init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Register_Deinit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Initial
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
</UL>

<P><STRONG><a name="[161]"></a>SD_InitializeCards</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[160]"></a>SD_PowerON</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_PowerON &rArr; CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[159]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>SD_ReadBlock</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[16e]"></a>SD_ReadDisk</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
</UL>

<P><STRONG><a name="[170]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 710 bytes, Stack size 56 bytes, sdio_sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[163]"></a>SD_SelectDeselect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[165]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[171]"></a>SD_WriteBlock</STRONG> (Thumb, 862 bytes, Stack size 80 bytes, sdio_sdcard.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[172]"></a>SD_WriteDisk</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
</UL>

<P><STRONG><a name="[173]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 934 bytes, Stack size 72 bytes, sdio_sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[174]"></a>SET_POWER_Down</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, led.o(i.SET_POWER_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SET_POWER_Down &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check
</UL>

<P><STRONG><a name="[175]"></a>SPI1_Configuration</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, spi1.o(i.SPI1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI1_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>SPI1_ReadWrite_Byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, spi1.o(i.SPI1_ReadWrite_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_ID
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Read_Reg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_writeReg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_readRegs
</UL>

<P><STRONG><a name="[a5]"></a>SPI1_readRegs</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, spi1.o(i.SPI1_readRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI1_readRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
</UL>

<P><STRONG><a name="[178]"></a>SPI1_writeReg</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi1.o(i.SPI1_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI1_writeReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mwriteReg
</UL>

<P><STRONG><a name="[179]"></a>SPI2_Configuration</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, spi2.o(i.SPI2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI2_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
</UL>

<P><STRONG><a name="[177]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
</UL>

<P><STRONG><a name="[1a]"></a>STORAGE_GetCapacity</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbd_storage_msd.o(i.STORAGE_GetCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STORAGE_GetCapacity &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>STORAGE_GetMaxLun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_GetMaxLun))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>STORAGE_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = STORAGE_Init &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>STORAGE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_IsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = STORAGE_IsReady &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>STORAGE_IsWriteProtected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_IsWriteProtected))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = STORAGE_IsWriteProtected &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>STORAGE_Read</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd_storage_msd.o(i.STORAGE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = STORAGE_Read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Putw_Dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>STORAGE_Write</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbd_storage_msd.o(i.STORAGE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = STORAGE_Write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Putw_Dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>Scan_Key_Routing</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, led.o(i.Scan_Key_Routing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Scan_Key_Routing
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>Set_BeepON</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, led.o(i.Set_BeepON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_BeepON
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>Sum_check</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart2.o(i.Sum_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sum_check
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_CommandRoute
</UL>

<P><STRONG><a name="[30]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TIM3_IRQHandler &rArr; Updata_PC_Route &rArr; UART2_ReportMotion &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PC_Route
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 788 bytes, Stack size 8 bytes, fat_driver.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TIM4_IRQHandler &rArr; Updata_PC_Route &rArr; UART2_ReportMotion &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PC_Route
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
</UL>

<P><STRONG><a name="[111]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
</UL>

<P><STRONG><a name="[112]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
</UL>

<P><STRONG><a name="[e1]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Inttrup_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSave_TimerSet
</UL>

<P><STRONG><a name="[10c]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
</UL>

<P><STRONG><a name="[10f]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
</UL>

<P><STRONG><a name="[10d]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
</UL>

<P><STRONG><a name="[10e]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
</UL>

<P><STRONG><a name="[e0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_PWM_LED
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Inttrup_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSave_TimerSet
</UL>

<P><STRONG><a name="[180]"></a>Tim3_NVIC_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, time3_driver.o(i.Tim3_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tim3_NVIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Inttrup_init
</UL>

<P><STRONG><a name="[1fe]"></a>Tim3_Restart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, time3_driver.o(i.Tim3_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>Tim3_Set_Speed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, time3_driver.o(i.Tim3_Set_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>Tim3_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time3_driver.o(i.Tim3_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>Time3_Inttrup_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, time3_driver.o(i.Time3_Inttrup_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Time3_Inttrup_init &rArr; Tim3_NVIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>UART1_CommandRoute</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart1.o(i.UART1_CommandRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_CommandRoute &rArr; Sum_check
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sum_check
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>UART1_Put_String</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart1.o(i.UART1_Put_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1WriteDataToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceSuspended
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceResumed
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceReset
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceDisconnected
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConnected
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConfigured
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsWriteProtected
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
</UL>

<P><STRONG><a name="[17b]"></a>UART1_Putw_Dec</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, uart1.o(i.UART1_Putw_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART1_Putw_Dec &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1WriteDataToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
</UL>

<P><STRONG><a name="[185]"></a>UART2_CommandRoute</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart2.o(i.UART2_CommandRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART2_CommandRoute &rArr; Sum_check
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sum_check
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>UART2_ReportHMC</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, uart2.o(i.UART2_ReportHMC))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART2_ReportHMC &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2WriteDataToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PC_Route
</UL>

<P><STRONG><a name="[189]"></a>UART2_ReportIMU</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, uart2.o(i.UART2_ReportIMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART2_ReportIMU &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2WriteDataToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PC_Route
</UL>

<P><STRONG><a name="[18a]"></a>UART2_ReportMotion</STRONG> (Thumb, 636 bytes, Stack size 40 bytes, uart2.o(i.UART2_ReportMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART2_ReportMotion &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2WriteDataToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PC_Route
</UL>

<P><STRONG><a name="[87]"></a>UART2_Send_ACC</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, uart2.o(i.UART2_Send_ACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART2_Send_ACC &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2WriteDataToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Cal
</UL>

<P><STRONG><a name="[18b]"></a>USART1DMAConfig</STRONG> (Thumb, 150 bytes, Stack size 80 bytes, usart1dmatx.o(i.USART1DMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1WriteDataToBuffer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAUpdate
</UL>

<P><STRONG><a name="[da]"></a>USART1DMAUpdate</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, usart1dmatx.o(i.USART1DMAUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART1DMAUpdate &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemDelete
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>USART1WriteDataToBuffer</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, usart1dmatx.o(i.USART1WriteDataToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Putw_Dec
</UL>

<P><STRONG><a name="[52]"></a>USART1_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, uart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>USART2DMAConfig</STRONG> (Thumb, 150 bytes, Stack size 80 bytes, usart2dmatx.o(i.USART2DMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2WriteDataToBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAUpdate
</UL>

<P><STRONG><a name="[d9]"></a>USART2DMAUpdate</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, usart2dmatx.o(i.USART2DMAUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART2DMAUpdate &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemDelete
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>USART2WriteDataToBuffer</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, usart2dmatx.o(i.USART2WriteDataToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_ReportMotion
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_ReportIMU
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_ReportHMC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Send_ACC
</UL>

<P><STRONG><a name="[53]"></a>USART2_IRQHandler</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, uart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>

<P><STRONG><a name="[11a]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1DMAConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2DMAConfig
</UL>

<P><STRONG><a name="[114]"></a>USART_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
</UL>

<P><STRONG><a name="[18e]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
</UL>

<P><STRONG><a name="[115]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
</UL>

<P><STRONG><a name="[18f]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[197]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[198]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[196]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[199]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[19a]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[195]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1a3]"></a>USBD_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[135]"></a>USBD_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ioreq.o(i.USBD_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[19f]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[1a1]"></a>USBD_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_Init &rArr; DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_OpenMassStorage
</UL>

<P><STRONG><a name="[f]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_MSC_DeInit &rArr; DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_MSC_GetCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc_core.o(i.USBD_MSC_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_MSC_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_MSC_Setup</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1b0]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1b4]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1b6]"></a>USBD_StdEPReq</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[17]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_USR_DeviceConfigured &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_USR_DeviceConnected &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_USR_DeviceDisconnected &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_USR_DeviceReset &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_USR_DeviceResumed &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_USR_DeviceSuspended &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_USR_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_USR_Init &rArr; UART1_Put_String &rArr; USART1WriteDataToBuffer &rArr; USART1DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1b7]"></a>USB_Check</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.USB_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_Check &rArr; SET_POWER_Down &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_POWER_Down
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1a2]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[b1]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[1ba]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[d2]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[d4]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, usb_core.o(i.USB_OTG_CoreInitDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_CoreInitDev &rArr; USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[d1]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[c2]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[bc]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[c7]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>

<P><STRONG><a name="[ba]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[b5]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[b3]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[bf]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[bd]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[1bd]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableDevInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableDevInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[d5]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[b8]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[b7]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
</UL>

<P><STRONG><a name="[c3]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[1bf]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[1bc]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[1a6]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1a7]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[c5]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[ca]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[cb]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[cd]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[d0]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[d3]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[d6]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[17f]"></a>Updata_PC_Route</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, main.o(i.Updata_PC_Route))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Updata_PC_Route &rArr; UART2_ReportMotion &rArr; USART2WriteDataToBuffer &rArr; USART2DMAConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_ReportMotion
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_ReportIMU
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_ReportHMC
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>Write_AT24C</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, eeprom.o(i.Write_AT24C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwriteBytes
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_config
</UL>

<P><STRONG><a name="[89]"></a>Write_config</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eeprom.o(i.Write_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write_config &rArr; Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_AT24C
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_InitGyro_Offset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Save_cal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Filed
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Save_Calib
</UL>

<P><STRONG><a name="[1c3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[103]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
</UL>

<P><STRONG><a name="[1c9]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[106]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
</UL>

<P><STRONG><a name="[12b]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
</UL>

<P><STRONG><a name="[fe]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_AHRSupdate
</UL>

<P><STRONG><a name="[1c5]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1cc]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c1]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1ca]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1c2]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1cd]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1cb]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1e2]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[16b]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1da]"></a>delay_init</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_System_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_AT24C
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_OpenMassStorage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check
</UL>

<P><STRONG><a name="[9b]"></a>delay_us</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_InitGyro_Offset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_readPROM
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883_FIFO_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_get_ACCMAX
</UL>

<P><STRONG><a name="[1dd]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1e5]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e6]"></a>disk_ioctl</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1e7]"></a>disk_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[1f7]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e8]"></a>disk_write</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Put_String
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[1e9]"></a>f_close</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_close
</UL>

<P><STRONG><a name="[dd]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Initial
</UL>

<P><STRONG><a name="[1ee]"></a>f_open</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_open
</UL>

<P><STRONG><a name="[1ea]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1f5]"></a>f_write</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_write
</UL>

<P><STRONG><a name="[1c6]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1d5]"></a>get_fat</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1f0]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[ea]"></a>invSqrt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, imu.o(i.invSqrt))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_AHRSupdate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIMU_AHRSupdate
</UL>

<P><STRONG><a name="[1f8]"></a>load_config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eeprom.o(i.load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = load_config &rArr; Write_config &rArr; Write_AT24C &rArr; IICwriteBytes &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_define
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_config
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f9]"></a>load_define</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, eeprom.o(i.load_define))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
</UL>

<P><STRONG><a name="[75]"></a>main</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = main &rArr; mf_open &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BeepON
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key_Routing
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_POWER_Down
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Reverse
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Change
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LED_GPIO
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_Reset_ACC_Offset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_InitGyro_Offset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Save_cal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Cal
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Inttrup_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Stop
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Set_Speed
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Restart
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_BAT_LOW
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Voltage_initial
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_file_name
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611BA_Routing
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_ResetAlt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_OpenMassStorage
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_open
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_close
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_CommandRoute
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_CommandRoute
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_head
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Save_Routing
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSave_TimerSet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Initial
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Check
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Start_Calib
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Save_Calib
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[200]"></a>mf_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fat_driver.o(i.mf_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mf_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fc]"></a>mf_open</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fat_driver.o(i.mf_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mf_open &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>mf_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fat_driver.o(i.mf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mf_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_head
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Save_Routing
</UL>

<P><STRONG><a name="[1d6]"></a>put_fat</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1c7]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1fa]"></a>usbd_CloseMassStorage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_usr.o(i.usbd_CloseMassStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_CloseMassStorage &rArr; DCD_DevDisconnect &rArr; USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fb]"></a>usbd_OpenMassStorage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_usr.o(i.usbd_OpenMassStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usbd_OpenMassStorage &rArr; USBD_Init &rArr; DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[24c]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[24d]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[24e]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[24f]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[250]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_AHRSupdate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIMU_AHRSupdate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
</UL>

<P><STRONG><a name="[206]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIMU_AHRSupdate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[209]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[20c]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[210]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[20e]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[251]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[252]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[20f]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[213]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIMU_AHRSupdate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[211]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[208]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[20b]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[212]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[214]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1d1]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[216]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_getYawPitchRoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_AHRSupdate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeIMU_AHRSupdate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_get_altitude
</UL>

<P><STRONG><a name="[217]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[253]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[254]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101BA_getPressure
</UL>

<P><STRONG><a name="[255]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[218]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[6f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[256]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[257]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[207]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[20d]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1d0]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[219]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[149]"></a>Read_config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, eeprom.o(i.Read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_config &rArr; IICreadBytes &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_config
</UL>

<P><STRONG><a name="[a7]"></a>BMI160_GetAvg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bmi160.o(i.BMI160_GetAvg))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
</UL>

<P><STRONG><a name="[a6]"></a>BMI160_NewVal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bmi160.o(i.BMI160_NewVal))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_readAccGyro
</UL>

<P><STRONG><a name="[a1]"></a>BMI160_Read_Reg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bmi160.o(i.BMI160_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMI160_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_init
</UL>

<P><STRONG><a name="[a3]"></a>mwriteReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmi160.o(i.mwriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mwriteReg &rArr; SPI1_writeReg
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI160_init
</UL>

<P><STRONG><a name="[17e]"></a>SetSysClock</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d2]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d9]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1f6]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[1d4]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[1d7]"></a>create_name</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1dc]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1df]"></a>dir_find</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1de]"></a>dir_next</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1e3]"></a>dir_register</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1ed]"></a>find_volume</STRONG> (Thumb, 886 bytes, Stack size 80 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1ef]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1ec]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1f1]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1e0]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1e4]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[1d8]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1d3]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[1f3]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1f2]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1f4]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1e1]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1eb]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[c1]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[c4]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[c9]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1a8]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[cc]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1aa]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1a9]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[ce]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1ab]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1ac]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[c6]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[c8]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1bb]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[1be]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>

<P><STRONG><a name="[4]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[19b]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[6]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[194]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19c]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19d]"></a>USBD_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1a0]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[19e]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1af]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1b2]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[133]"></a>MSC_BOT_Abort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BOT_Abort &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[134]"></a>MSC_BOT_CBW_Decode</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetRxCount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[138]"></a>MSC_BOT_SendData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSC_BOT_SendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[14a]"></a>SCSI_CheckAddressRange</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_CheckAddressRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[14d]"></a>SCSI_Inquiry</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usbd_msc_scsi.o(i.SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_Inquiry
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[150]"></a>SCSI_ModeSense10</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_ModeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_ModeSense10
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[14f]"></a>SCSI_ModeSense6</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_ModeSense6
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[156]"></a>SCSI_ProcessRead</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[157]"></a>SCSI_ProcessWrite</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
</UL>

<P><STRONG><a name="[153]"></a>SCSI_Read10</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCSI_Read10 &rArr; SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[152]"></a>SCSI_ReadCapacity10</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_ReadCapacity10 &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[151]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCSI_ReadFormatCapacity &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[14c]"></a>SCSI_RequestSense</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_RequestSense
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[14e]"></a>SCSI_StartStopUnit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_StartStopUnit))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[14b]"></a>SCSI_TestUnitReady</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_TestUnitReady &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[155]"></a>SCSI_Verify10</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Verify10))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SCSI_Verify10 &rArr; SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[154]"></a>SCSI_Write10</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[11b]"></a>NVIC_Configuration</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart1.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_UART1
</UL>

<P><STRONG><a name="[183]"></a>Sum_check</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart1.o(i.Sum_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sum_check
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_CommandRoute
</UL>

<P><STRONG><a name="[215]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[20a]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
